// Leetcode 189

### Approach 1 → using reversal

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        k=k%n;
        reverse(nums.begin(),nums.begin()+(n-k));
        reverse(nums.begin()+(n-k),nums.end());
        reverse(nums.begin(),nums.end());
    }
};

// Time Complexity: O( n )

// Space Complexity: O( 1 )

### Approach 2 → using Cyclic Replacement Algorithm


class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        k = k % n;  // Handle cases where k is greater than n
        
        int count = 0;  // To count the number of elements moved
        for (int start = 0; count < n; start++) {
            int current = start;
            int prev = nums[start];
            do {
                int next = (current + k) % n;
                swap(nums[next], prev);
                current = next;
                count++;
            } while (start != current);
        }
    }
};



// Time Complexity: O( n )

// Space Complexity: O( 1 )
